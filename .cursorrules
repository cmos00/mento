# Cursor Rules for Playwright Integration

## Playwright 테스트 자동화 규칙

### 1. 테스트 작성 시 가이드라인
- 모든 E2E 테스트는 `tests/` 디렉토리에 작성
- 테스트 파일명은 `*.spec.ts` 형식 사용
- 테스트 그룹은 `test.describe()`로 구성
- 각 테스트 전에 필요한 setup은 `test.beforeEach()` 사용

### 2. 테스트 작성 패턴
```typescript
// 좋은 예시
test('사용자 시나리오 설명', async ({ page }) => {
  // Given: 초기 상태 설정
  await page.goto('/auth/login');
  
  // When: 액션 수행
  await page.locator('text=데모로 로그인').click();
  
  // Then: 결과 검증
  await expect(page).toHaveURL('/questions');
});
```

### 3. 선택자 우선순위
1. 텍스트 기반: `page.locator('text=버튼명')`
2. 데이터 속성: `page.locator('[data-testid="element-id"]')`
3. 역할 기반: `page.getByRole('button', { name: '버튼명' })`
4. CSS 선택자: 최후의 수단으로만 사용

### 4. 테스트 안정성
- `page.waitForURL()` 사용하여 네비게이션 완료 대기
- `page.waitForTimeout()` 대신 `page.waitForSelector()` 사용
- 동적 요소는 `expect().toBeVisible()` 로 존재 확인 후 조작

### 5. 커버리지 우선순위
1. 핵심 사용자 플로우 (로그인, 질문 작성)
2. 네비게이션 및 라우팅
3. 폼 입력 및 검증
4. 에러 처리 시나리오
5. 반응형 디자인 (모바일/데스크톱)

### 6. 테스트 환경
- 로컬: `npm run test:headed` (브라우저 UI 보면서 실행)
- 개발: `npm run test:ui` (Playwright UI 모드)
- 디버그: `npm run test:debug` (단계별 실행)
- CI/CD: `npm run test` (헤드리스 모드)

### 7. 파일 구조
```
tests/
├── auth.spec.ts        # 인증 관련 테스트
├── navigation.spec.ts  # 네비게이션 테스트  
├── questions.spec.ts   # 질문 기능 테스트
├── profile.spec.ts     # 프로필 기능 테스트
└── fixtures/           # 테스트 데이터
```

## 외부 서비스 설정 상태 (중요!)

### 현재 설정 상태 (2025년 1월 기준)

#### 1. Supabase 설정
- ✅ **프로젝트 생성**: 완료
- ✅ **API 키 설정**: `.env.local`에 실제 값 설정 완료
- ✅ **데이터베이스 테이블**: `users`, `questions` 등 테이블 존재 확인
- ❌ **RLS 정책**: 확인 필요 (fetch failed 에러의 원인일 수 있음)
- ❌ **스키마 적용**: `supabase/schema.sql` 내용이 실제로 적용되었는지 확인 필요

#### 2. Vercel 설정
- ❌ **프로젝트 배포**: 미완료
- ❌ **환경 변수 설정**: 프로덕션 환경 변수 미설정

#### 3. GitHub 설정
- ✅ **소스 코드**: 로컬 저장소 존재
- ❌ **GitHub OAuth**: 미설정 (현재 데모 로그인만 사용)

#### 4. LinkedIn 설정
- ❌ **LinkedIn OAuth**: `.env.local`에 더미 값만 설정
- ❌ **LinkedIn Developer Portal**: 앱 생성 미완료

### 현재 발생 중인 문제
- **에러**: `TypeError: fetch failed` (Supabase 연결 실패)
- **위치**: `/api/questions/create` 라우트의 39번째 라인
- **원인 추정**: 
  1. RLS 정책 문제
  2. 네트워크 연결 문제
  3. API 키 권한 문제

### 다음 확인 사항
1. **Supabase RLS 정책 확인**
2. **Service Role Key 권한 확인**
3. **네트워크 연결 상태 확인**

### 환경 변수 파일 위치
- `.env.local`: 프로젝트 루트에 위치
- 실제 Supabase 키가 설정되어 있음 (더미 값 아님)

### 중요 파일들
- `src/app/api/questions/create/route.ts`: 문제 발생 위치
- `src/lib/supabase.ts`: Supabase 클라이언트 설정
- `supabase/schema.sql`: 데이터베이스 스키마
- `SUPABASE_SETUP.md`: Supabase 설정 가이드

이 정보를 기억해두시면 다른 대화에서도 현재 상황을 파악하고 문제를 해결할 수 있습니다.
