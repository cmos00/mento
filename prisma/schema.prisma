// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  linkedinId    String?   @unique
  linkedinUrl   String?
  profileImage  String?
  company       String?
  position      String?
  experience    Int?      // 경력 연차
  industry      String?
  skills        String[]
  bio           String?
  isMentor      Boolean   @default(false)
  mentorProfile MentorProfile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  questions     Question[]
  feedbacks     Feedback[]
  mentoringSessions MentoringSession[] @relation("Mentee")
  mentorSessions    MentoringSession[] @relation("Mentor")
  careerJournal CareerJournalEntry[]
  rewards      Reward[]
  upvotes     Upvote[]
  bestAnswers BestAnswer[]
}

model MentorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties String[] // 전문 분야
  rating      Float    @default(0)
  totalFeedback Int    @default(0)
  isVerified  Boolean  @default(false)
  availability String? // 가능한 시간
  hourlyRate  Int?     // 시간당 요금
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentoringSessions MentoringSession[]
}

model Question {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // 이직, 조직 갈등, 성과 관리 등
  tags        String[]
  isAnonymous Boolean  @default(true)
  status      String   @default("open") // open, answered, closed
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  feedbacks   Feedback[]
  mentoringSessions MentoringSession[]
}

model Feedback {
  id          String   @id @default(cuid())
  content     String
  examples    String?  // 구체적인 사례
  advice      String?  // 조언
  resources   String[] // 추천 리소스
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  mentorId    String
  mentor      User     @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  upvotes     Upvote[]
  bestAnswers BestAnswer[]
}

model MentoringSession {
  id          String   @id @default(cuid())
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  menteeId    String
  mentee      User     @relation("Mentee", fields: [menteeId], references: [id], onDelete: Cascade)
  mentorId    String
  mentor      User     @relation("Mentor", fields: [mentorId], references: [id], onDelete: Cascade)
  status      String   @default("pending") // pending, active, completed, cancelled
  startTime   DateTime?
  endTime     DateTime?
  notes       String?
  rating      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CareerJournalEntry {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  feedbackId  String?
  feedback    Feedback? @relation(fields: [feedbackId], references: [id])
  actionItems String[] // 후속 액션 아이템
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // coffee_coupon, points, etc.
  amount      Int
  description String
  isRedeemed  Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
}

model Upvote {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbackId  String
  feedback    Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([userId, feedbackId])
}

model BestAnswer {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbackId  String
  feedback    Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([feedbackId])
}
